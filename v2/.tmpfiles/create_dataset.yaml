name: Create dataset
inputs:
- {name: bq_table, type: String}
- {name: project, type: String}
outputs:
- {name: output_data_path, type: Dataset}
implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery' 'pandas' 'pyarrow' 'db_dtypes' 'kfp==1.8.14' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def create_dataset(
          bq_table: str,
          output_data_path: OutputPath("Dataset"),
          project: str
      ):
          from google.cloud import bigquery
          import pandas as pd
          bq_client = bigquery.Client(project=project)


          def get_query(bq_input_table: str) -> str:
              """Generates BQ Query to read data.

              Args:
              bq_input_table: The full name of the bq input table to be read into
              the dataframe (e.g. <project>.<dataset>.<table>)
              Returns: A BQ query string.
              """
              return f"""
              SELECT *
              FROM `{bq_input_table}`
              """

          def load_bq_data(query: str, client: bigquery.Client) -> pd.DataFrame:
              """Loads data from bq into a Pandas Dataframe for EDA.
              Args:
              query: BQ Query to generate data.
              client: BQ Client used to execute query.
              Returns:
              pd.DataFrame: A dataframe with the requested data.
              """
              df = client.query(query).to_dataframe()
              return df

          dataframe = load_bq_data(get_query(bq_table), bq_client)
          dataframe.to_csv(output_data_path)

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - create_dataset
